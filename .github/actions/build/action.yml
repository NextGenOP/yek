name: Build
description: Build yek across different platforms

inputs:
  upload_artifacts:
    required: false
    default: "false"
    description: "Whether to upload artifacts"

outputs:
  binary_path:
    description: "Path to the built binary"
    value: ${{ steps.get_binary_path.outputs.path }}

runs:
  using: "composite"
  steps:
    - name: Install OpenSSL (Ubuntu)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install musl tools (Linux musl)
      if: runner.os == 'Linux' && contains(matrix.target, 'musl')
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools musl-dev
        # For aarch64 target
        if [[ "${{ matrix.target }}" == "aarch64"* ]]; then
          # Install musl cross-compiler
          sudo apt-get install -y musl-dev musl-tools
          git clone https://github.com/richfelker/musl-cross-make.git
          cd musl-cross-make
          echo "TARGET = aarch64-linux-musl" > config.mak
          echo "OUTPUT = /usr/local" >> config.mak
          make -j$(nproc)
          sudo make install
          cd ..
          rm -rf musl-cross-make
        fi

    - name: Install OpenSSL (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install openssl@3
        echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

    - name: Install OpenSSL (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        choco install openssl --params='/InstallationPath:C:\OpenSSL\'
        echo "OPENSSL_DIR=C:\OpenSSL" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PKG_CONFIG_PATH=C:\OpenSSL\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Install cross (Linux)
      if: ${{ contains(matrix.target, 'linux') && contains(matrix.target, 'gnu') }}
      shell: bash
      run: cargo install cross

    - name: Setup Rust (Native builds)
      if: ${{ !contains(matrix.target, 'linux') || !contains(matrix.target, 'gnu') }}
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        components: rustfmt,clippy

    - name: Install Rust target
      if: ${{ !contains(matrix.target, 'linux') || !contains(matrix.target, 'gnu') }}
      shell: bash
      run: rustup target add ${{ matrix.target }}

    - name: Build with cross (Linux GNU)
      if: ${{ contains(matrix.target, 'linux') && contains(matrix.target, 'gnu') }}
      shell: bash
      run: cross build --release --target ${{ matrix.target }}

    - name: Build with cross (Linux MUSL)
      if: ${{ contains(matrix.target, 'linux') && contains(matrix.target, 'musl') }}
      shell: bash
      run: |
        # Set CC and other flags for musl builds
        if [[ "${{ matrix.target }}" == "aarch64"* ]]; then
          export CC=aarch64-linux-musl-gcc
          export AR=aarch64-linux-musl-ar
          export RUSTFLAGS="-C linker=aarch64-linux-musl-gcc"
          export PKG_CONFIG_ALLOW_CROSS=1
          export OPENSSL_STATIC=1
          # Configure pkg-config for cross-compilation
          export PKG_CONFIG_SYSROOT_DIR=/usr/local/aarch64-linux-musl
          export PKG_CONFIG_PATH=/usr/local/aarch64-linux-musl/lib/pkgconfig
          # Build OpenSSL statically for aarch64-musl
          git clone https://github.com/openssl/openssl.git
          cd openssl
          ./Configure linux-aarch64 --prefix=/usr/local/aarch64-linux-musl no-shared
          make -j$(nproc)
          sudo make install
          cd ..
          rm -rf openssl
        else
          export CC=musl-gcc
        fi
        cargo build --release --target ${{ matrix.target }}

    - name: Native build (macOS/Windows)
      if: ${{ !contains(matrix.target, 'linux') }}
      shell: bash
      run: cargo build --release --target ${{ matrix.target }}

    - name: Get binary path (Unix)
      if: runner.os != 'Windows'
      id: unix_path
      shell: bash
      run: echo "path=target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" >> $GITHUB_OUTPUT

    - name: Get binary path (Windows)
      if: runner.os == 'Windows'
      id: windows_path
      shell: pwsh
      run: echo "path=target\${{ matrix.target }}\release\${{ matrix.artifact_name }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Set final path
      id: get_binary_path
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          echo "path=${{ steps.windows_path.outputs.path }}" >> $GITHUB_OUTPUT
        else
          echo "path=${{ steps.unix_path.outputs.path }}" >> $GITHUB_OUTPUT
        fi

    - name: Upload artifact
      if: ${{ inputs.upload_artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.target }}-${{ matrix.asset_name }}
        path: ${{ steps.get_binary_path.outputs.path }}
        if-no-files-found: error
