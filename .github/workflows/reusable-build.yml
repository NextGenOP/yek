name: Reusable Build

on:
  workflow_call:
    inputs:
      run_command:
        required: true
        type: string
        description: "Command to run after build"
      timeout_minutes:
        required: false
        type: number
        default: 5
        description: "Timeout in minutes for the run command"
      checkout_vscode:
        required: false
        type: boolean
        default: false
        description: "Whether to checkout VSCode repository"
      upload_artifacts:
        required: false
        type: boolean
        default: false
        description: "Whether to upload artifacts"

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  OPENSSL_STATIC: true
  PKG_CONFIG_ALLOW_CROSS: true

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ inputs.timeout_minutes }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds using cross
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: true
            artifact_name: yek
            asset_name: yek-x86_64-unknown-linux-gnu.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true
            artifact_name: yek
            asset_name: yek-aarch64-unknown-linux-gnu.tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true
            artifact_name: yek
            asset_name: yek-x86_64-unknown-linux-musl.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use-cross: true
            artifact_name: yek
            asset_name: yek-aarch64-unknown-linux-musl.tar.gz

          # Native macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: yek
            asset_name: yek-x86_64-apple-darwin.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: yek
            asset_name: yek-aarch64-apple-darwin.tar.gz

          # Native Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: yek.exe
            asset_name: yek-x86_64-pc-windows-msvc.zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: yek.exe
            asset_name: yek-aarch64-pc-windows-msvc.zip

    steps:
      - uses: actions/checkout@v4

      - name: Install OpenSSL (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install openssl --params='/InstallationPath:C:\OpenSSL\'
          echo "OPENSSL_DIR=C:\OpenSSL" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\OpenSSL\lib\pkgconfig" >> $env:GITHUB_ENV

      - name: Install cross (Linux)
        if: matrix.use-cross
        run: cargo install cross

      - name: Setup Rust (Native builds)
        if: ${{ !matrix.use-cross }}
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt,clippy

      - name: Install Rust target
        if: ${{ !matrix.use-cross }}
        run: rustup target add ${{ matrix.target }}

      - name: Build with cross (Linux)
        if: matrix.use-cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Native build (macOS/Windows)
        if: ${{ !matrix.use-cross }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Checkout VSCode repository
        if: inputs.checkout_vscode
        uses: actions/checkout@v4
        with:
          repository: microsoft/vscode
          path: vscode
          fetch-depth: 1

      - name: Run command
        shell: bash
        timeout-minutes: ${{ inputs.timeout_minutes }}
        run: ${{ inputs.run_command }}

      - name: Upload artifact
        if: inputs.upload_artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}-${{ matrix.asset_name }}
          path: release-artifacts/${{ matrix.asset_name }}
          if-no-files-found: error
