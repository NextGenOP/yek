name: Perf

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  OPENSSL_STATIC: true
  PKG_CONFIG_ALLOW_CROSS: true

jobs:
  stress:
    name: Stress ${{ matrix.target }}
    if: github.event_name == 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds using cross
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: yek
            asset_name: yek-x86_64-unknown-linux-gnu.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: yek
            asset_name: yek-aarch64-unknown-linux-gnu.tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: yek
            asset_name: yek-x86_64-unknown-linux-musl.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: yek
            asset_name: yek-aarch64-unknown-linux-musl.tar.gz

          # Native macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: yek
            asset_name: yek-x86_64-apple-darwin.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: yek
            asset_name: yek-aarch64-apple-darwin.tar.gz

          # Native Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: yek.exe
            asset_name: yek-x86_64-pc-windows-msvc.zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: yek.exe
            asset_name: yek-aarch64-pc-windows-msvc.zip

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/build
        id: build
        with:
          upload_artifacts: "false"

      - name: Install yek (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: cargo install --path .

      - name: Install yek (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cargo install --path .

      - name: Checkout VSCode repository
        uses: actions/checkout@v4
        with:
          repository: microsoft/vscode
          path: vscode
          fetch-depth: 1

      - name: Run yek (Unix)
        if: runner.os != 'Windows'
        shell: bash
        timeout-minutes: 1
        run: cd vscode && yek

      - name: Run yek (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        timeout-minutes: 1
        run: |
          Set-Location vscode
          yek

  benchmark:
    name: Benchmark / ${{ matrix.benchmark_group.name }}
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        benchmark_group:
          - { group: "SingleFile_ByteMode", name: "Single File Byte Mode" }
          - {
              group: "SingleFile_ByteMode_Large",
              name: "Single File Byte Mode Large",
            }
          - {
              group: "SingleFile_TokenMode_Large",
              name: "Single File Token Mode Large",
            }
          - { group: "MultipleFiles_Small", name: "Multiple Files Small" }
          - { group: "MultipleFiles_Medium", name: "Multiple Files Medium" }
          - { group: "MultipleFiles_Large", name: "Multiple Files Large" }
          - {
              group: "MultipleFiles_TokenMode",
              name: "Multiple Files Token Mode",
            }
          - { group: "CustomConfig", name: "Custom Config" }

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Run benchmarks
        run: |
          # Build and run on target branch
          git fetch origin ${{ github.base_ref }}
          git checkout ${{ github.base_ref }}
          cargo bench --bench serialization --no-run
          cargo bench --bench serialization -- --save-baseline ${{ github.base_ref }} '${{ matrix.benchmark_group.group }}/'

          # Build and compare on PR branch
          git checkout ${{ github.head_ref }}
          cargo bench --bench serialization --no-run
          cargo bench --bench serialization -- --baseline ${{ github.base_ref }} --noise-threshold 2 '${{ matrix.benchmark_group.group }}/' > benchmark_results.md
          echo "## Benchmark Results for ${{ matrix.benchmark_group.name }}" >> $GITHUB_STEP_SUMMARY
          cat benchmark_results.md >> $GITHUB_STEP_SUMMARY

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: criterion-${{ matrix.benchmark_group.group }}-results
          path: benchmark_results.md
          if-no-files-found: error
