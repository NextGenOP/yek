name: Perf

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  OPENSSL_STATIC: true
  PKG_CONFIG_ALLOW_CROSS: true

jobs:
  wait-for-ci:
    name: Wait for CI
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Wait for CI build
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: "Build *"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  stress:
    name: Stress ${{ matrix.target }}
    needs: wait-for-ci
    if: github.event_name == 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds using cross
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          # Native macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          # Native Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v4

      # Download the binary from CI build
      - uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: dist

      - name: Extract binary (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p bin
          tar xzf dist/yek-${{ matrix.target }}.tar.gz -C bin
          chmod +x bin/yek-${{ matrix.target }}/yek
          sudo cp bin/yek-${{ matrix.target }}/yek /usr/local/bin/

      - name: Extract binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path bin
          7z x "dist\yek-${{ matrix.target }}.zip" -obin
          Copy-Item "bin\yek-${{ matrix.target }}\yek.exe" -Destination "C:\Windows\System32\"

      - name: Checkout VSCode repository
        uses: actions/checkout@v4
        with:
          repository: microsoft/vscode
          path: vscode
          fetch-depth: 1

      - name: Run yek against vscode
        shell: bash
        timeout-minutes: 1
        working-directory: vscode
        run: yek

  benchmark:
    name: Benchmark / ${{ matrix.benchmark_group.name }}
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        benchmark_group:
          - group: SingleFile_ByteMode
            name: Single File Byte Mode
          - group: SingleFile_ByteMode_Large
            name: Single File Byte Mode Large
          - group: SingleFile_TokenMode_Large
            name: Single File Token Mode Large
          - group: MultipleFiles_Small
            name: Multiple Files Small
          - group: MultipleFiles_Medium
            name: Multiple Files Medium
          - group: MultipleFiles_Large
            name: Multiple Files Large
          - group: MultipleFiles_TokenMode
            name: Multiple Files Token Mode
          - group: CustomConfig
            name: Custom Config

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Run benchmarks
        run: |
          # Build and run on target branch
          git fetch origin ${{ github.base_ref }}
          git checkout ${{ github.base_ref }}
          cargo bench --bench serialization --no-run
          cargo bench --bench serialization -- --save-baseline ${{ github.base_ref }} '${{ matrix.benchmark_group.group }}/'

          # Build and compare on PR branch
          git checkout ${{ github.head_ref }}
          cargo bench --bench serialization --no-run
          cargo bench --bench serialization -- --baseline ${{ github.base_ref }} --noise-threshold 2 '${{ matrix.benchmark_group.group }}/' > benchmark_results.md
          echo "## Benchmark Results for ${{ matrix.benchmark_group.name }}" >> $GITHUB_STEP_SUMMARY
          cat benchmark_results.md >> $GITHUB_STEP_SUMMARY

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: criterion-${{ matrix.benchmark_group.group }}-results
          path: benchmark_results.md
          if-no-files-found: error
