name: CI

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  OPENSSL_STATIC: true
  PKG_CONFIG_ALLOW_CROSS: true

permissions:
  contents: write

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install OpenSSL (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
      - name: Run tests
        run: cargo test --verbose

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Clippy
        run: cargo clippy -- -D warnings
      - name: Format check
        run: cargo fmt --check

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux GNU builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: yek
            asset_name: yek-x86_64-unknown-linux-gnu.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: yek
            asset_name: yek-aarch64-unknown-linux-gnu.tar.gz

          # Linux MUSL builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: yek
            asset_name: yek-x86_64-unknown-linux-musl.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: yek
            asset_name: yek-aarch64-unknown-linux-musl.tar.gz

          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: yek
            asset_name: yek-x86_64-apple-darwin.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: yek
            asset_name: yek-aarch64-apple-darwin.tar.gz

          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: yek.exe
            asset_name: yek-x86_64-pc-windows-msvc.zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: yek.exe
            asset_name: yek-aarch64-pc-windows-msvc.zip
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      # Linux GNU dependencies
      - name: Install cross-compilation tools (Linux ARM64)
        if: runner.os == 'Linux' && contains(matrix.target, 'aarch64') && !contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      # Linux MUSL dependencies
      - name: Install MUSL tools
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      # OpenSSL setup for different platforms
      - name: Install OpenSSL (Ubuntu)
        if: runner.os == 'Linux' && !contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Setup OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

      # Build with appropriate flags
      - name: Build target
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --release --target ${{ matrix.target }} --locked

      - name: Package
        shell: bash
        run: |
          staging="yek-${{ matrix.target }}"
          mkdir -p "$staging"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "$staging/"
            7z a "${{ matrix.asset_name }}" "$staging"
          else
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "$staging/"
            tar czf "${{ matrix.asset_name }}" "$staging"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}
          if-no-files-found: error

  release:
    name: Release
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: "yek-*"
