name: Release
on:
  push:
    tags:
      - "v*"
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  should-release:
    name: Check Release Eligibility
    runs-on: ubuntu-latest
    outputs:
      needed: ${{ steps.check-release.outputs.release_needed }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if on main branch
        id: check-branch
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "on_main=true" >> $GITHUB_OUTPUT
          else
            echo "on_main=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing release (main branch only)
        if: steps.check-branch.outputs.on_main == 'true'
        id: check-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_SHA=$(git rev-parse HEAD)
          RELEASE_EXISTS=false

          # Get all releases and their tags
          mapfile -t RELEASES < <(gh api repos/$GITHUB_REPOSITORY/releases --jq '.[].tag_name')

          for TAG in "${RELEASES[@]}"; do
            # Resolve tag to commit SHA (handles annotated tags)
            TAG_OBJECT_SHA=$(gh api repos/$GITHUB_REPOSITORY/git/ref/tags/$TAG --jq '.object.sha' 2>/dev/null || true)
            if [ -n "$TAG_OBJECT_SHA" ]; then
              if [[ "$(gh api repos/$GITHUB_REPOSITORY/git/tags/$TAG_OBJECT_SHA --jq '.object.type' 2>/dev/null)" == "commit" ]]; then
                COMMIT_SHA=$(gh api repos/$GITHUB_REPOSITORY/git/tags/$TAG_OBJECT_SHA --jq '.object.sha')
              else
                COMMIT_SHA=$(gh api repos/$GITHUB_REPOSITORY/git/commits/$TAG_OBJECT_SHA --jq '.sha')
              fi

              if [ "$COMMIT_SHA" = "$CURRENT_SHA" ]; then
                RELEASE_EXISTS=true
                break
              fi
            fi
          done

          echo "release_needed=$([ "$RELEASE_EXISTS" = "false" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Set default output for non-main branches
        if: steps.check-branch.outputs.on_main != 'true'
        run: echo "release_needed=false" >> $GITHUB_OUTPUT

  build:
    needs: should-release
    if: (github.ref == 'refs/heads/main' && needs.should-release.outputs.needed == 'true') || startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/ci.yml
      
  release:
    needs: [should-release, build]
    if: |
      (github.ref == 'refs/heads/main' && needs.should-release.outputs.needed == 'true') ||
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
      - name: Move artifacts
        run: find . -name 'yek-*.tar.gz' -exec mv {} . \;
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: yek-*.tar.gz
          generate_release_notes: true
          update: ${{ steps.check-branch.outputs.on_main == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --no-verify --allow-dirty