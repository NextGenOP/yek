name: Release
on:
  push:
    tags:
      - "v*"
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  should-release:
    name: Check Release Eligibility
    runs-on: ubuntu-latest
    outputs:
      needed: ${{ steps.check-release.outputs.release_needed }}
    steps:
      - name: Check if on main branch
        id: check-branch
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "on_main=true" >> $GITHUB_OUTPUT
          else
            echo "on_main=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing release (main branch only)
        if: steps.check-branch.outputs.on_main == 'true'
        id: check-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_SHA=$(git rev-parse HEAD)
          RELEASE_EXISTS=false

          # Get all releases and their tags
          mapfile -t RELEASES < <(gh api repos/$GITHUB_REPOSITORY/releases --jq '.[].tag_name')

          for TAG in "${RELEASES[@]}"; do
            # Resolve tag to commit SHA (handles annotated tags)
            TAG_OBJECT_SHA=$(gh api repos/$GITHUB_REPOSITORY/git/ref/tags/$TAG --jq '.object.sha' 2>/dev/null || true)
            if [ -n "$TAG_OBJECT_SHA" ]; then
              if [[ "$(gh api repos/$GITHUB_REPOSITORY/git/tags/$TAG_OBJECT_SHA --jq '.object.type' 2>/dev/null)" == "commit" ]]; then
                COMMIT_SHA=$(gh api repos/$GITHUB_REPOSITORY/git/tags/$TAG_OBJECT_SHA --jq '.object.sha')
              else
                COMMIT_SHA=$(gh api repos/$GITHUB_REPOSITORY/git/commits/$TAG_OBJECT_SHA --jq '.sha')
              fi

              if [ "$COMMIT_SHA" = "$CURRENT_SHA" ]; then
                RELEASE_EXISTS=true
                break
              fi
            fi
          done

          echo "release_needed=$([ "$RELEASE_EXISTS" = "false" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Set default output for non-main branches
        if: steps.check-branch.outputs.on_main != 'true'
        run: echo "release_needed=false" >> $GITHUB_OUTPUT

  build:
    needs: should-release
    if: |
      (github.ref == 'refs/heads/main' && needs.should-release.outputs.needed == 'true') ||
      startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install cross-compilation tools
        if: runner.os == 'Linux' && contains(matrix.target, 'aarch64')
        run: sudo apt-get install -y gcc-aarch64-linux-gnu
      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}
          mkdir -p "yek-${{ matrix.target }}"
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp "target/${{ matrix.target }}/release/yek.exe" "yek-${{ matrix.target }}/"
            7z a "yek-${{ matrix.target }}.tar.gz" "yek-${{ matrix.target }}"/*
          else
            cp "target/${{ matrix.target }}/release/yek" "yek-${{ matrix.target }}/"
            tar -czf "yek-${{ matrix.target }}.tar.gz" "yek-${{ matrix.target }}"
          fi
      - name: Compute SHA256
        id: sha
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "sha256=$(certutil -hashfile yek-${{ matrix.target }}.tar.gz SHA256 | findstr /v 'hash' | tr -d ' \r\n')" >> $GITHUB_OUTPUT
          else
            echo "sha256=$(shasum -a 256 yek-${{ matrix.target }}.tar.gz | awk '{print $1}')" >> $GITHUB_OUTPUT
          fi
      - name: Create SHA file
        run: echo "${{ steps.sha.outputs.sha256 }}" > sha-${{ matrix.target }}.txt
      - uses: actions/upload-artifact@v3
        with:
          name: yek-${{ matrix.target }}
          path: |
            yek-${{ matrix.target }}.tar.gz
            sha-${{ matrix.target }}.txt

  release:
    needs: [should-release, build]
    if: |
      (github.ref == 'refs/heads/main' && needs.should-release.outputs.needed == 'true') ||
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
      - name: Move artifacts
        run: find . -name 'yek-*.tar.gz' -exec mv {} . \;
      - uses: softprops/action-gh-release@v1
        with:
          files: yek-*.tar.gz
          generate_release_notes: true
          update: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --no-verify